print_lik=TRUE) # print log-likelihood at each iteration
GridBAUs1i <- SRE.predict(SRE_model = S1i, # SRE model
obs_fs = FALSE)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
MSE_FRK1i<-mean((log(testi$DGBS)-over(testi,GridBAUs1i)$mu)^2) #returns the GridBAUs1 entry with closest pixel
time<-c(time,time.takeni)
mseListFRK1<-c(mseListFRK1,MSE_FRK1i)
}
mean(unlist(mseListFRK1))
sd(unlist(mseListFRK1))
mean(unlist(time))
sd(unlist(time))
####
mseListFRK3<-list()
timeFRK3<-list()
for(i in 1:10){
set.seed(i)
trainIndices<-sample(1:length(h20Edit),length(h20Edit)/4,replace = FALSE)
testi<-h20Edit[trainIndices,]
traini<-h20Edit[-trainIndices,]
start.timei<-Sys.time()
S3i <- SRE(f = f1, # formula
data = list(traini), # list of datasets
BAUs = GridBAUs3, # BAUs
basis = G, # basis functions
est_error = TRUE, # estimation measurement error
average_in_BAU = FALSE) # do not average data over BAUs
S3i <- SRE.fit(SRE_model = S3i, # SRE model
n_EM = 100, # max. no. of EM iterations
tol = 0.1, # tolerance at which EM is assumed to have converged
print_lik=TRUE) # print log-likelihood at each iteration
GridBAUs3i <- SRE.predict(SRE_model = S3i, # SRE model
obs_fs = FALSE)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
MSE_FRK3i<-mean((log(testi$DGBS)-over(testi,GridBAUs3i)$mu)^2) #returns the GridBAUs1 entry with closest pixel
timeFRK3<-c(timeFRK3,time.takeni)
mseListFRK3<-c(mseListFRK3,MSE_FRK3i)
}
mean(unlist(timeFRK3))
sd(unlist(timeFRK3))
mean(unlist(mseListFRK3))
sd(unlist(mseListFRK3))
G <- auto_basis(manifold = plane(), # 2D plane
data=h20Pts, # meuse data
nres = 2, # number of resolutions
type = "Matern32", # type of basis function
regular = 0) # place regularly in domain if 1
mseListFRK1<-list()
time<-list()
for(i in 1:10){
set.seed(i)
trainIndices<-sample(1:length(h20Edit),length(h20Edit)/4,replace = FALSE)
testi<-h20Edit[trainIndices,]
traini<-h20Edit[-trainIndices,]
start.timei<-Sys.time()
S1i <- SRE(f = f1, # formula
data = list(traini), # list of datasets
BAUs = GridBAUs1, # BAUs
basis = G, # basis functions
est_error = TRUE, # estimation measurement error
average_in_BAU = FALSE) # do not average data over BAUs
S1i <- SRE.fit(SRE_model = S1i, # SRE model
n_EM = 100, # max. no. of EM iterations
tol = 0.1, # tolerance at which EM is assumed to have converged
print_lik=TRUE) # print log-likelihood at each iteration
GridBAUs1i <- SRE.predict(SRE_model = S1i, # SRE model
obs_fs = FALSE)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
MSE_FRK1i<-mean((log(testi$DGBS)-over(testi,GridBAUs1i)$mu)^2) #returns the GridBAUs1 entry with closest pixel
time<-c(time,time.takeni)
mseListFRK1<-c(mseListFRK1,MSE_FRK1i)
}
mean(unlist(mseListFRK1))
sd(unlist(mseListFRK1))
mean(unlist(time))
sd(unlist(time))
mseListFRK3<-list()
timeFRK3<-list()
for(i in 1:10){
set.seed(i)
trainIndices<-sample(1:length(h20Edit),length(h20Edit)/4,replace = FALSE)
testi<-h20Edit[trainIndices,]
traini<-h20Edit[-trainIndices,]
start.timei<-Sys.time()
S3i <- SRE(f = f1, # formula
data = list(traini), # list of datasets
BAUs = GridBAUs3, # BAUs
basis = G, # basis functions
est_error = TRUE, # estimation measurement error
average_in_BAU = FALSE) # do not average data over BAUs
S3i <- SRE.fit(SRE_model = S3i, # SRE model
n_EM = 100, # max. no. of EM iterations
tol = 0.1, # tolerance at which EM is assumed to have converged
print_lik=TRUE) # print log-likelihood at each iteration
GridBAUs3i <- SRE.predict(SRE_model = S3i, # SRE model
obs_fs = FALSE)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
MSE_FRK3i<-mean((log(testi$DGBS)-over(testi,GridBAUs3i)$mu)^2) #returns the GridBAUs1 entry with closest pixel
timeFRK3<-c(timeFRK3,time.takeni)
mseListFRK3<-c(mseListFRK3,MSE_FRK3i)
}
mean(unlist(timeFRK3))
sd(unlist(timeFRK3))
mean(unlist(mseListFRK3))
sd(unlist(mseListFRK3))
show_basis(G2) + # illustrate basis functions
coord_fixed() + # fix aspect ratio
xlab("(b)") + # x-label
ylab("Latitude") # y-label
G2 <- auto_basis(manifold = plane(), # 2D plane
data=h20Pts, # meuse data
nres = 3, # number of resolutions
type = "bisquare", # type of basis function
regular = 0) # place regularly in domain if 1
mseListFRK3<-list()
timeFRK3<-list()
for(i in 1:10){
set.seed(i)
trainIndices<-sample(1:length(h20Edit),length(h20Edit)/4,replace = FALSE)
testi<-h20Edit[trainIndices,]
traini<-h20Edit[-trainIndices,]
start.timei<-Sys.time()
S3i <- SRE(f = f1, # formula
data = list(traini), # list of datasets
BAUs = GridBAUs3, # BAUs
basis = G2, # basis functions
est_error = TRUE, # estimation measurement error
average_in_BAU = FALSE) # do not average data over BAUs
S3i <- SRE.fit(SRE_model = S3i, # SRE model
n_EM = 100, # max. no. of EM iterations
tol = 0.1, # tolerance at which EM is assumed to have converged
print_lik=TRUE) # print log-likelihood at each iteration
GridBAUs3i <- SRE.predict(SRE_model = S3i, # SRE model
obs_fs = FALSE)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
MSE_FRK3i<-mean((log(testi$DGBS)-over(testi,GridBAUs3i)$mu)^2) #returns the GridBAUs1 entry with closest pixel
timeFRK3<-c(timeFRK3,time.takeni)
mseListFRK3<-c(mseListFRK3,MSE_FRK3i)
}
mean(unlist(timeFRK3))
sd(unlist(timeFRK3))
mean(unlist(mseListFRK3))
sd(unlist(mseListFRK3))
GridBAUs4<- auto_BAUs(manifold = plane(), # 2D plane
cellsize = c(0.05,0.05), # BAU cellsize
type = "grid", # grid (not hex)
data = h20Edit, # data around which to create BAUs
convex=-0.05, # border buffer factor
nonconvex_hull=FALSE)
plot(GridBAUs4)
GridBAUs4$fs <- 1
mseListFRK3<-list()
timeFRK3<-list()
for(i in 1:10){
set.seed(i)
trainIndices<-sample(1:length(h20Edit),length(h20Edit)/4,replace = FALSE)
testi<-h20Edit[trainIndices,]
traini<-h20Edit[-trainIndices,]
start.timei<-Sys.time()
S3i <- SRE(f = f1, # formula
data = list(traini), # list of datasets
BAUs = GridBAUs4, # BAUs
basis = G2, # basis functions
est_error = TRUE, # estimation measurement error
average_in_BAU = FALSE) # do not average data over BAUs
S3i <- SRE.fit(SRE_model = S3i, # SRE model
n_EM = 100, # max. no. of EM iterations
tol = 0.1, # tolerance at which EM is assumed to have converged
print_lik=TRUE) # print log-likelihood at each iteration
GridBAUs4i <- SRE.predict(SRE_model = S3i, # SRE model
obs_fs = FALSE)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
MSE_FRK3i<-mean((log(testi$DGBS)-over(testi,GridBAUs4i)$mu)^2) #returns the GridBAUs1 entry with closest pixel
timeFRK3<-c(timeFRK3,time.takeni)
mseListFRK3<-c(mseListFRK3,MSE_FRK3i)
}
mean(unlist(timeFRK3))
sd(unlist(timeFRK3))
mean(unlist(mseListFRK3))
sd(unlist(mseListFRK3))
for(i in 1:2){
set.seed(i)
trainIndices<-sample(1:length(h20Edit),length(h20Edit)/4,replace = FALSE)
testi<-h20Edit[trainIndices,]
traini<-h20Edit[-trainIndices,]
start.timei<-Sys.time()
S3i <- SRE(f = f1, # formula
data = list(traini), # list of datasets
BAUs = GridBAUs3, # BAUs
basis = G2, # basis functions
est_error = TRUE, # estimation measurement error
average_in_BAU = FALSE) # do not average data over BAUs
S3i <- SRE.fit(SRE_model = S3i, # SRE model
n_EM = 100, # max. no. of EM iterations
tol = 0.1, # tolerance at which EM is assumed to have converged
print_lik=TRUE) # print log-likelihood at each iteration
GridBAUs3i <- SRE.predict(SRE_model = S3i, # SRE model
obs_fs = FALSE)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
MSE_FRK3i<-mean((log(testi$DGBS)-over(testi,GridBAUs3i)$mu)^2) #returns the GridBAUs1 entry with closest pixel
timeFRK3<-c(timeFRK3,time.takeni)
mseListFRK3<-c(mseListFRK3,MSE_FRK3i)
}
mean(unlist(timeFRK3))
mean(unlist(mseListFRK3))
BAUs_df <- as(GridBAUs3i,"data.frame")
g_grid2FRK <- ggplot() + # Use a plain theme
geom_tile(data=BAUs_df , # Draw BAUs
aes(Longitude,Latitude,fill=mu), # Colour <-> Mean
colour="light grey") + # Border is light grey
scale_fill_distiller(palette="Spectral", # Spectral palette
name="pred.") + # legend name
#geom_point(data=data.frame(h20Edit), # Plot data
#           aes(Longitude,Latitude,fill=log(DGBS)), # Colour <-> log(zinc)
#           colour="black", # point outer colour
#           pch=21, size=1) + # size of point
coord_fixed() + # fix aspect ratio
xlab("Longitude") + ylab("Latitude") + # axes labels
theme_bw()
g_grid2FRK
g2 <- ggplot() + # Similar to above but with s.e.
geom_tile(data=BAUs_df,
aes(Longitude,Latitude,fill=sqrt(var)),
colour="light grey") +
scale_fill_distiller(palette="BrBG",name = "s.e.",
guide = guide_legend(title="se")) +
coord_fixed() +
xlab("Longitude") + ylab("Latitude") + theme_bw()
g2
grid.arrange(g1, g2, ncol=2)
grid.arrange(g_grid2FRK, g2, ncol=2)
UK2 <- krige(id="logDist", formula=log(DGBS)~1+Latitude, train, newdata=GridBAUs3, model = v.fit_U)
time1<-system.time()
UK2 <- krige(id="logDist", formula=log(DGBS)~1+Latitude, train, newdata=GridBAUs3, model = v.fit_U)
time2<-system.time()
time.taken<-time2-time1
Sys.time()
time1<-Sys.time()
UK2 <- krige(id="logDist", formula=log(DGBS)~1+Latitude, train, newdata=GridBAUs3, model = v.fit_U)
time2<-Sys.time()
time.taken<-time2-time1
time.taken
BAUs_df2 <- as(UK2,"data.frame")
BAUs_df2 <- as(UK2,"data.frame")
g_grid2FRK <- ggplot() + # Use a plain theme
geom_tile(data=BAUs_df2 , # Draw BAUs
aes(Longitude,Latitude,fill=logDist.pred), # Colour <-> Mean
colour="light grey") + # Border is light grey
scale_fill_distiller(palette="Spectral", # Spectral palette
name="pred.") + # legend name
#geom_point(data=data.frame(h20Edit), # Plot data
#           aes(Longitude,Latitude,fill=log(DGBS)), # Colour <-> log(zinc)
#           colour="black", # point outer colour
#           pch=21, size=1) + # size of point
coord_fixed() + # fix aspect ratio
xlab("Longitude") + ylab("Latitude") + # axes labels
theme_bw()
g_grid2FRK
g2 <- ggplot() + # Similar to above but with s.e.
geom_tile(data=BAUs_df2,
aes(Longitude,Latitude,fill=sqrt(logDist.var)),
colour="light grey") +
scale_fill_distiller(palette="BrBG",name = "s.e.",
guide = guide_legend(title="se")) +
coord_fixed() +
xlab("Longitude") + ylab("Latitude") + theme_bw()
g2
grid.arrange(g_grid2FRK, g2, ncol=2)
for(i in 1:10){
set.seed(i)
trainIndices<-sample(1:length(h20Edit),length(h20Edit)/4,replace = FALSE)
testi<-h20Edit[trainIndices,]
traini<-h20Edit[-trainIndices,]
start.timei<-Sys.time()
##### variogram for universal kriging
train_g_U <- gstat(id="log_dist", formula = log(DGBS)~1+Latitude, data = traini)
vg_U<-variogram(train_g_U)
v.fit_U <- fit.variogram(vg_U, vgm(1.5,"Sph",400,0.5))
UK2 <- krige(id="logDist", formula=log(DGBS)~1+Latitude, traini, newdata=GridBAUs3, model = v.fit_U)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
time<-c(time,time.takeni)
}
mean(unlist(time))
sd(unlist(time))
unlist(time)
?SRE
S3i <- SRE(f = f1, # formula
data = list(traini), # list of datasets
BAUs = GridBAUs3, # BAUs
basis = G2, # basis functions
est_error = FALSE,std=0.4, # estimation measurement error
average_in_BAU = FALSE) # do not average data over BAUs
S3i <- SRE(f = f1, # formula
data = list(traini,std=0.4), # list of datasets
BAUs = GridBAUs3, # BAUs
basis = G2, # basis functions
est_error = FALSE, # estimation measurement error
average_in_BAU = FALSE) # do not average data over BAUs
mseListFRK3<-list()
timeFRK3<-list()
for(i in 1:10){
set.seed(i)
trainIndices<-sample(1:length(h20Edit),length(h20Edit)/4,replace = FALSE)
testi<-h20Edit[trainIndices,]
traini<-h20Edit[-trainIndices,]
start.timei<-Sys.time()
S3i <- SRE(f = f1, # formula
data = list(traini), # list of datasets
BAUs = GridBAUs3, # BAUs
basis = G2, # basis functions
est_error = FALSE, # estimation measurement error
average_in_BAU = FALSE) # do not average data over BAUs
S3i <- SRE.fit(SRE_model = S3i, # SRE model
n_EM = 100, # max. no. of EM iterations
tol = 0.1, # tolerance at which EM is assumed to have converged
print_lik=TRUE) # print log-likelihood at each iteration
GridBAUs3i <- SRE.predict(SRE_model = S3i, # SRE model
obs_fs = FALSE)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
MSE_FRK3i<-mean((log(testi$DGBS)-over(testi,GridBAUs3i)$mu)^2) #returns the GridBAUs1 entry with closest pixel
timeFRK3<-c(timeFRK3,time.takeni)
mseListFRK3<-c(mseListFRK3,MSE_FRK3i)
}
mean(unlist(timeFRK3))
sd(unlist(timeFRK3))
mean(unlist(mseListFRK3))
sd(unlist(mseListFRK3))
for(i in 1:10){
set.seed(i)
trainIndices<-sample(1:length(h20Edit),length(h20Edit)/4,replace = FALSE)
testi<-h20Edit[trainIndices,]
traini<-h20Edit[-trainIndices,]
start.timei<-Sys.time()
S3i <- SRE(f = f1, # formula
data = list(traini), # list of datasets
BAUs = GridBAUs3, # BAUs
basis = G2, # basis functions
est_error = TRUE, # estimation measurement error
average_in_BAU = FALSE) # do not average data over BAUs
S3i <- SRE.fit(SRE_model = S3i, # SRE model
n_EM = 100, # max. no. of EM iterations
tol = 0.1, # tolerance at which EM is assumed to have converged
print_lik=TRUE) # print log-likelihood at each iteration
GridBAUs3i <- SRE.predict(SRE_model = S3i, # SRE model
obs_fs = FALSE)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
MSE_FRK3i<-mean((log(testi$DGBS)-over(testi,GridBAUs3i)$mu)^2) #returns the GridBAUs1 entry with closest pixel
timeFRK3<-c(timeFRK3,time.takeni)
mseListFRK3<-c(mseListFRK3,MSE_FRK3i)
}
mean(unlist(timeFRK3))
sd(unlist(timeFRK3))
mean(unlist(mseListFRK3))
sd(unlist(mseListFRK3))
head(GridBAUs1)
head(GridBAUs3)
mseListFRK3<-list()
timeFRK3<-list()
for(i in 1:10){
set.seed(i)
trainIndices<-sample(1:length(h20Edit),length(h20Edit)/4,replace = FALSE)
testi<-h20Edit[trainIndices,]
traini<-h20Edit[-trainIndices,]
start.timei<-Sys.time()
S3i <- SRE(f = f1, # formula
data = list(traini), # list of datasets
BAUs = GridBAUs3, # BAUs
basis = G2, # basis functions
est_error = TRUE, # estimation measurement error
average_in_BAU = FALSE) # do not average data over BAUs
S3i <- SRE.fit(SRE_model = S3i, # SRE model
n_EM = 100, # max. no. of EM iterations
tol = 1, # tolerance at which EM is assumed to have converged
print_lik=TRUE) # print log-likelihood at each iteration
GridBAUs3i <- SRE.predict(SRE_model = S3i, # SRE model
obs_fs = FALSE)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
MSE_FRK3i<-mean((log(testi$DGBS)-over(testi,GridBAUs3i)$mu)^2) #returns the GridBAUs1 entry with closest pixel
timeFRK3<-c(timeFRK3,time.takeni)
mseListFRK3<-c(mseListFRK3,MSE_FRK3i)
}
mean(unlist(timeFRK3))
sd(unlist(timeFRK3))
mean(unlist(mseListFRK3))
sd(unlist(mseListFRK3))
time<-list()
for(i in 1:10){
set.seed(i)
trainIndices<-sample(1:length(h20Edit),length(h20Edit)/4,replace = FALSE)
testi<-h20Edit[trainIndices,]
traini<-h20Edit[-trainIndices,]
start.timei<-Sys.time()
##### variogram for universal kriging
train_g_U <- gstat(id="log_dist", formula = log(DGBS)~1+Latitude, data = traini)
vg_U<-variogram(train_g_U)
v.fit_U <- fit.variogram(vg_U, vgm(1.5,"Sph",400,0.5))
UK2 <- krige(id="logDist", formula=log(DGBS)~1+Latitude, traini, newdata=GridBAUs3, model = v.fit_U)
end.timei<-Sys.time()
time.takeni<-end.timei-start.timei
time<-c(time,time.takeni)
}
mean(unlist(time)) # avg time = 32 sec. sd 19.6
sd(unlist(time))
plot(vg,v.fit)
v.fit
variog4(train_g_U)
?variog4
variog4(train)
dir.vgm<-variogram(data=train_g_U, alpha=c(0,45,90,135))
variogram(train_g_U)
dir.vgm<-variogram(train_g_U, alpha=c(0,45,90,135))
plot(dir.vgm)
citation(package="ggmap")
corr = .7
svar=0.04
ssd=sqrt(svar)
gsd=sqrt(gvar)
gvar=0.16
gsd=sqrt(gvar)
corr = .7
corr*ssd*gsd
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
?kernel
getwd()
install.packages("formatR", repos = "http://cran.rstudio.com")
library(formatR)
tidy_dir()
tidy_dir()
tidy_source(width.cutoff = 50)
tidy_dir()
tidy_source(width.cutoff = 50)
library(FRK)
library(sp)
library(ggplot2)
library(ggmap)
library(geoR)
library(gstat)
library(INLA)
library(foreign)
library(rgdal)
library(gridExtra)
h20<-read.dbf("~/Downloads/Fall_2016_Depth_Points/F2016_DBGS_Points_20170327_102311.dbf")
getwd()
getwd()
setwd(dir = "/Desktop/R-DSTools")
setwd(dir = "/Users/bricerandolph/Desktop/R-DSTools")
getwd()
ls()
setwd(dir = "/Users/bricerandolph/Desktop/R-DSTools")
BugFreq <- read.csv('Bug-Frequency.csv')
View(BugFreq)
BugFreq <- read.csv('Bug-Frequency.csv',sep=';')
View(BugFreq)
names(bugs) <- c("Region","<10 g","10-20 g","20-30 g","30-40 g",">40 g")
bugs <- read.csv('Bug-Frequency.csv',sep=';')
names(bugs) <- c("Region","<10 g","10-20 g","20-30 g","30-40 g",">40 g")
library(tidyr)
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("dplyr")
library(tidyr)
library(dplyr)
setwd(dir = "/Users/bricerandolph/Desktop/R-DSTools")
bugs <- read.csv('Bug-Frequency.csv',sep=';')
names(bugs) <- c("Region","<10 g","10-20 g","20-30 g","30-40 g",">40 g")
library(tidyr)
library(dplyr)
setwd(dir = "/Users/bricerandolph/Desktop/R-DSTools")
bugs <- read.csv('Bug-Frequency.csv',sep=';')
View(BugFreq)
names(bugs) <- c("Region","<10 g","10-20 g","20-30 g","30-40 g",">40 g")
head(bugs)
library(tidyr)
library(dplyr)
setwd(dir = "/Users/bricerandolph/Desktop/R-DSTools")
bugs <- read.csv('Bug-Frequency.csv',sep=';')
View(bugs)
gather(data = bugs, key = weight, value = counts, -Region)
?gather
colnames(bugs)
names(bugs) <- c("Region","<10 g","10-20 g","20-30 g","30-40 g",">40 g")
head(bugs)
gather(data = bugs, key = weight, value = counts, -Region)
bugs.table = tbl_df(gather(data = bugs, key = weight, value = counts, -Region))
head(bugs.table)
arrange(bugs.table, Region)
ageSex <- data.frame(name=c("Paul","Kim","Nora","Sue","Paul","Kim"),
biometrics=c("179m","173f","174f","159f","188m","163f"),
measurement=rnorm(6))
ageSex
seperate(data=ageSex, col=biometrics, into=c("height","sex"),3)
separate(data=ageSex, col=biometrics, into=c("height","sex"),3)
sports<- data.frame(name=c("Paul","Paul","Nora","Nora","Kim","Kim"),
performance=c("top","low","top","low","top","low"),
counts=c(11,3,18,2,9,1))
sports
spread(data=sports,key=performance, value = counts)
install.packages("data.table")
faf
